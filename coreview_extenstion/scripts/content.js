(() => {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        if (request.action === "startCrawling") {
            startCrawling();
        }
    });

    async function startCrawling() {
        console.log("üöÄ Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅÏùÑ ÏãúÏûëÌï©ÎãàÎã§...");
        
        let allReviews = [];
        let currentPage = 1;
        let visitedPages = new Set();

        while (true) {
            console.log(`üìÑ ÌéòÏù¥ÏßÄ ${currentPage} Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ Ï§ë...`);

            // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Î¶¨Î∑∞ Í∞ÄÏ†∏Ïò§Í∏∞
            const reviews = extractReviews();
            allReviews = allReviews.concat(reviews);
            visitedPages.add(currentPage);

            // ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄÏù∏ÏßÄ ÌôïÏù∏
            let nextPageButton = findNextPageButton(currentPage, visitedPages);
            if (!nextPageButton) {
                console.log("üöÄ Îçî Ïù¥ÏÉÅ ÌéòÏù¥ÏßÄ ÏóÜÏùå ‚Üí ÌÅ¨Î°§ÎßÅ Ï¢ÖÎ£å!");
                break;
            }

            // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÎÇ¥Ïö© Ï†ÄÏû• (DOM Î≥ÄÍ≤Ω Í∞êÏßÄÏö©)
            let previousPageContent = document.body.innerHTML;

            // Îã§Ïùå ÌéòÏù¥ÏßÄ ÌÅ¥Î¶≠
            nextPageButton.click();
            console.log(`‚û°Ô∏è ÌéòÏù¥ÏßÄ ${currentPage + 1} Ïù¥Îèô Ï§ë...`);

            // ÌéòÏù¥ÏßÄÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞ (ÏµúÎåÄ 10Ï¥à)
            let pageChanged = await waitForPageChange(previousPageContent, 10);
            if (!pageChanged) {
                console.warn("‚ö†Ô∏è ÌéòÏù¥ÏßÄ Î°úÎî© Ïã§Ìå®! ‚Üí ÌÅ¨Î°§ÎßÅ Ï¢ÖÎ£å");
                break;
            }

            currentPage++;
        }

        console.log(`‚úÖ Ï¥ù ${allReviews.length}Í∞úÏùò Î¶¨Î∑∞Î•º ÏàòÏßëÌñàÏäµÎãàÎã§.`);
        // saveJSON(allReviews);
        sendToFlask(allReviews)
    }

    function extractReviews() {
        const reviews = [];
        const reviewElements = document.querySelectorAll("article.sdp-review__article__list");

        reviewElements.forEach((reviewElement) => {
            const userName = reviewElement.querySelector("span.sdp-review__article__list__info__user__name")?.textContent.trim() || "-";
            const reviewDate = reviewElement.querySelector("div.sdp-review__article__list__info__product-info__reg-date")?.textContent.trim() || "-";
            const rating = reviewElement.querySelector("div.sdp-review__article__list__info__product-info__star-orange")?.getAttribute("data-rating") || "0";
            const reviewContent = reviewElement.querySelector("div.sdp-review__article__list__review > div")?.textContent.trim() || "Îì±Î°ùÎêú Î¶¨Î∑∞ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§";

            reviews.push({
                userName,
                reviewDate,
                rating,
                reviewContent,
            });
        });

        return reviews;
    }

    function findNextPageButton(currentPage, visitedPages) {
        // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Î≤àÌò∏Î≥¥Îã§ 1 ÌÅ∞ ÌéòÏù¥ÏßÄ Î≤ÑÌäº Ï∞æÍ∏∞
        let nextPageButton = document.querySelector(`button.sdp-review__article__page__num.js_reviewArticlePageBtn[data-page="${currentPage + 1}"]`);

        // Îã§Ïùå ÌéòÏù¥ÏßÄ Î≤ÑÌäºÏù¥ ÏóÜÏúºÎ©¥ "Îã§Ïùå" Î≤ÑÌäº Ï∞æÍ∏∞
        if (!nextPageButton) {
            const nextArrowButton = document.querySelector(".sdp-review__article__page__next");
            if (nextArrowButton && !nextArrowButton.classList.contains("disabled")) {
                return nextArrowButton;
            }
        }

        return nextPageButton;
    }

    async function waitForPageChange(previousPageContent, maxRetries) {
        console.log("‚åõ ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Í∞êÏßÄ Ï§ë...");
        
        let attempts = maxRetries;
        while (attempts > 0) {
            await new Promise((resolve) => setTimeout(resolve, 1500)); // 1.5Ï¥à ÎåÄÍ∏∞
            
            // DOMÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            if (document.body.innerHTML !== previousPageContent) {
                console.log("‚úÖ ÌéòÏù¥ÏßÄ Î°úÎî© ÏôÑÎ£å!");
                return true;
            }
            
            attempts--;
        }

        return false;  // Î≥ÄÍ≤Ω Í∞êÏßÄ Ïã§Ìå®
    }

    function saveJSON(data) {
        const jsonData = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonData], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "coupang_reviews.json";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        console.log("üìÅ JSON ÌååÏùº Îã§Ïö¥Î°úÎìú ÏôÑÎ£å!");
    }

    //ÌîåÎùºÏä§ÌÅ¨Î°ú ÌÅ¨Î°§ÎßÅÌïú Îç∞Ïù¥ÌÑ∞ Ïù¥Îèô content.js -->background.jsÍ∞Ä Ï§ëÍ≥ÑÏó≠Ìï† --> analyze.py Î∂ÑÏÑù Í≤∞Í≥º --> popup.js
    async function sendToFlask(reviews) {
        try {
            let response = await fetch("http://localhost:8000/analyze", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ reviews: reviews })
            });
    
            if (!response.ok) {
                throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
            }
    
            let data = await response.json();
            console.log("üîç Î∂ÑÏÑù Í≤∞Í≥º:", data);
    
            // Î∂ÑÏÑù Í≤∞Í≥ºÎ•º popup.jsÎ°ú Ï†ÑÏÜ°
            chrome.runtime.sendMessage({ action: "showAnalysis", data: data });
    
        } catch (error) {
            console.error("‚ùå Flask ÏÑúÎ≤Ñ ÏöîÏ≤≠ Ïã§Ìå®:", error);
        }
    }    

})();